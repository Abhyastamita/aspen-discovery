<?php

require_once ROOT_DIR . '/sys/DB/DataObject.php';

class ListWidgetList extends DataObject
{
	public $__table = 'list_widget_lists';    // table name
	public $id;                      //int(25)
	public $listWidgetId;                    //varchar(255)
	public $name;
	public $displayFor;
	public $source;                    //varchar(255)
	public $searchTerm;
	public $defaultFilter;
	public $sourceListId;
	public $defaultSort;

	public $weight;

	function keys()
	{
		return array('id');
	}

	static function getObjectStructure()
	{
		// Get All User Lists
		require_once ROOT_DIR . '/sys/LocalEnrichment/UserList.php';
		$sourceLists = UserList::getSourceListsForBrowsingAndCarousels();

		$structure = array(
			'id' => array(
				'property' => 'id',
				'type' => 'label',
				'label' => 'Id',
				'description' => 'The unique id of the list widget file.'
			),
			'listWidgetId' => array(
				'property' => 'listWidgetId',
				'type' => 'foreignKey',
				'label' => 'List Widget Id',
				'description' => 'The widget this list is associated with.'
			),
			'name' => array(
				'property' => 'name',
				'type' => 'text',
				'label' => 'Name',
				'description' => 'The name of the list to display in the tab.',
				'required' => true,
			),
			'displayFor' => array(
				'property' => 'displayFor',
				'type' => 'enum',
				'values' => array('all' => 'Everyone', 'loggedIn' => 'Only when a user is logged in', 'notLoggedIn' => 'Only when no one is logged in'),
				'label' => 'Display For',
				'description' => 'Who this list should be displayed for.'
			),
			/*'source' => array(
				'property' => 'source',
				'type' => 'text',
				'label' => 'Source',
				'description' => 'The source of the list.',
				'serverValidation' => 'validateSource',
				'required' => false
			),*/
			'searchTerm' => array('property' => 'searchTerm', 'type' => 'text', 'label' => 'Search Term', 'description' => 'A default search term to apply to the category', 'default' => '', 'hideInLists' => true, 'maxLength' => 500),
			'defaultFilter' => array('property' => 'defaultFilter', 'type' => 'textarea', 'label' => 'Default Filter(s)', 'description' => 'Filters to apply to the search by default.', 'hideInLists' => true, 'rows' => 3, 'cols' => 80),
			'sourceListId' => array('property' => 'sourceListId', 'type' => 'enum', 'values' => $sourceLists, 'label' => 'Source List', 'description' => 'A public list to display titles from'),
			'defaultSort' => array('property' => 'defaultSort', 'type' => 'enum', 'label' => 'Default Sort', 'values' => array('relevance' => 'Best Match', 'popularity' => 'Popularity', 'newest_to_oldest' => 'Date Added', 'author' => 'Author', 'title' => 'Title', 'user_rating' => 'Rating'), 'description' => 'The default sort for the search if none is specified', 'default' => 'relevance', 'hideInLists' => true),
		);
		return $structure;
	}

	public function insert()
	{
		if ($this->source == null){
			$this->source = '';
		}
		return parent::insert(); // TODO: Change the autogenerated stub
	}

	function fullListLink()
	{
		global $configArray;
		if ($this->sourceListId != null && $this->sourceListId > 0){
			return $configArray['Site']['url'] . '/MyAccount/MyList/' . $this->sourceListId;
		}
		require_once ROOT_DIR . '/services/API/ListAPI.php';
		$listAPI = new ListAPI();
		$cacheInfo = $listAPI->getCacheInfoForListId($this->source);
		//Get the widget for the list
		$widget = new ListWidget();
		$widget->id = $this->listWidgetId;
		if ($widget->find(true)) {
			if ($widget->viewMoreLinkMode == 'covers') {
				$cacheInfo['fullListLink'] .= '&view=covers';
			}
		}
		return $cacheInfo['fullListLink'];
	}


	function validateName()
	{
		//Setup validation return array
		$validationResults = array(
			'validatedOk' => true,
			'errors' => array(),
		);

		//TODO: Check to see if the name is unique

		//Make sure there aren't errors
		if (count($validationResults['errors']) > 0) {
			$validationResults['validatedOk'] = false;
		}
		return $validationResults;
	}

	function __toString()
	{
		return "{$this->name} ($this->source)";
	}

	public function getSolrSort()
	{
		if ($this->defaultSort == 'relevance') {
			return 'relevance';
		} elseif ($this->defaultSort == 'popularity') {
			return 'popularity desc';
		} elseif ($this->defaultSort == 'newest_to_oldest') {
			return 'days_since_added asc';
		} elseif ($this->defaultSort == 'author') {
			return 'author,title';
		} elseif ($this->defaultSort == 'title') {
			return 'title,author';
		} elseif ($this->defaultSort == 'user_rating') {
			return 'rating desc,title';
		} else {
			return 'relevance';
		}
	}
}